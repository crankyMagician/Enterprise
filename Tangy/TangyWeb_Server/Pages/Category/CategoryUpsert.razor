@page "/category/create"
@page "/category/edit/{id:int}"
@using Tangy_Models;
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@*@attribute [Authorize]*@
<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                @* <ValidationSummary/>*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Category.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Category.Name"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {

    [Parameter]
    // This is a property that represents the identifier of a category.
    public int Id { get; set; }
    
    // This is a private property that represents a CategoryDTO object, initialized with a new instance.
    private CategoryDTO Category { get; set; } = new CategoryDTO();

    // This is a private property that represents the title of the page, which is set to "Create" by default.
    private string Title { get; set; } = "Create";
    // This is a public property that represents whether the component is currently loading.
    public bool IsLoading { get; set; }

    // This method is called after the component has rendered, and is used to load the category if the component is being updated.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // If the Id is 0, it means we are creating a new category, so we set IsLoading to false.
            if (Id == 0)
            {
                //create
                IsLoading = false;
            }
            else
            {
                // If the Id is not 0, it means we are updating an existing category, so we set the
                //  Title to "Update" and load the existing category.
                //update
                Title = "Update";
                await LoadCategory();
            }
        }

    }
    // This is a private method used to load an existing category.
    private async Task LoadCategory()
    {
        // We set IsLoading to true to indicate that the component is currently loading.
        IsLoading = true;
        StateHasChanged();
        // We load the category with the given Id from the CategoryRepository.
        Category = await _categoryRepository.Get(Id);
        // We set IsLoading to false to indicate that the component has finished loading.
        IsLoading = false;
        StateHasChanged();
    }
    // This is a private method used to create or update a category.
    private async Task UpsertCategory()
    {
        // If the Id of the category is 0, it means we are creating a new category,
        //  so we call the Create method of the CategoryRepository.
        if (Category.Id == 0)
        {
            //create
            await _categoryRepository.Create(Category);
        }
        else
        {
            // If the Id of the category is not 0, it means we are updating an existing category, 
            // so we call the Update method of the CategoryRepository.
            //update
            await _categoryRepository.Update(Category);
        }
        // We navigate to the "category" page after creating or updating the category.
        _navigationManager.NavigateTo("category");


    }
}