@page "/learnblazor/demoproduct"


<hr ><h2 class="text-primary">Demo Product</h2><hr />
<p>Favorites Total : @SelectedFavoriteCount</p>
<p>Last Selected Favorite : @LastProductSelectedName</p>
<div class="border p-2 mt-2" style="background-color:azure">
<div class="row">
        @foreach (var product in Products)
        {
              <_IndividualProduct Product="@product"OnFavoriteUpdated="CountFavorites"
                 OnLastSelectedProductChange="SelectedProductUpdate"> </_IndividualProduct>
        }
    </div>

</div>
@code {

    // Create an empty list to hold the products
    List<Demo_Products> Products = new();

    //how many favorites selected
    private int SelectedFavoriteCount { get; set; } = 0;

    //string for last product selected 
    private string LastProductSelectedName { get; set; }

    // This method is called when the component is initialized
    protected override void OnInitialized()
    {


        // Add a new product to the list with a specific set of product properties
        Products.Add(new()
            {
                Id = 1,
                Name = "Midnight Blaze",
                IsActive = false,
                Price = 10.99,
                ProductProperties = new()
            {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Rose"},
                new Demo_ProductProp { Id = 2, Key = "Size", Value = "20oz"},
                new Demo_ProductProp { Id = 3, Key = "Color", Value="Purple" }
            }
            });

        // Add another new product to the list with a different set of product properties
        Products.Add(new()
            {
                Id = 2,
                Name = "Blossom Lily",
                IsActive = true,
                Price = 10.99,
                ProductProperties = new()
            {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Lily" },
                new Demo_ProductProp { Id = 2, Key = "Size", Value = "18oz" },
                new Demo_ProductProp { Id = 3, Key = "Color", Value = "White" }
            }
            });
    }

    //count the favorites 
    protected void CountFavorites(bool isSelected)
    {
        if (isSelected)
        {
            SelectedFavoriteCount++;
        }
        else
        {
            SelectedFavoriteCount--;
        }
    }


    //count the favorites 
    protected void SelectedProductUpdate(string productName)
    {
        LastProductSelectedName = productName;
    }

}
