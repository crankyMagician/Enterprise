<div class="modal fade" data-backdrop="static" data-keyboard="false" id="deleteConfirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog  modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
                <button type="button" @onclick="()=>OnConfirmationDelete(false)" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete
            </div>
            @if (IsParentComponentProcessing)
            {
                <div class="modal-footer">
                    <button type="button" disabled class="btn btn-secondary" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" disabled class="btn btn-danger">
                        Processing...
                    </button>
                </div>
            }
            else
            {
                <div class="modal-footer">
                    <button type="button" @onclick="()=>OnConfirmationDelete(false)" class="btn btn-secondary" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" @onclick="()=>OnConfirmationDelete(true)" class="btn btn-danger">
                        Delete
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    //This line declares a public property called "IsParentComponentProcessing" that is annotated with the [Parameter] attribute. 
    // This property is used to indicate whether the parent component is currently processing or not.
    [Parameter]
    public bool IsParentComponentProcessing { get; set; }

    //This line declares a public property called "ConfirmationChanged" that is annotated with the [Parameter] attribute. 
    // This property is used to send a signal to the parent component when the confirmation state changes. 
    // The property is of type EventCallback<bool>, meaning it can accept a boolean value.
    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }

    //The "OnConfirmationDelete" method is called when the confirmation state changes.
    //  If the value of the confirmation is true, the "ConfirmationChanged" property is invoked with the new value. 
    // This sends a signal to the parent component that the confirmation state has changed.
    private async Task OnConfirmationDelete(bool value)
    {
        if (value)
        {
            await ConfirmationChanged.InvokeAsync(value);
        }
    }

}
